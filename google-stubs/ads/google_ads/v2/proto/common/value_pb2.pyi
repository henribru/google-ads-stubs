# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    Optional as typing___Optional,
    Text as typing___Text,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


class Value(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    boolean_value = ... # type: bool
    int64_value = ... # type: int
    float_value = ... # type: float
    double_value = ... # type: float
    string_value = ... # type: typing___Text

    def __init__(self,
        *,
        boolean_value : typing___Optional[bool] = None,
        int64_value : typing___Optional[int] = None,
        float_value : typing___Optional[float] = None,
        double_value : typing___Optional[float] = None,
        string_value : typing___Optional[typing___Text] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> Value: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"boolean_value",u"double_value",u"float_value",u"int64_value",u"string_value",u"value"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"boolean_value",u"double_value",u"float_value",u"int64_value",u"string_value",u"value"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"boolean_value",b"boolean_value",u"double_value",b"double_value",u"float_value",b"float_value",u"int64_value",b"int64_value",u"string_value",b"string_value",u"value",b"value"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"boolean_value",b"boolean_value",u"double_value",b"double_value",u"float_value",b"float_value",u"int64_value",b"int64_value",u"string_value",b"string_value",u"value",b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions___Literal[u"value",b"value"]) -> typing_extensions___Literal["boolean_value","int64_value","float_value","double_value","string_value"]: ...
