# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from google.protobuf.wrappers_pb2 import (
    StringValue as google___protobuf___wrappers_pb2___StringValue,
)

from typing import (
    Optional as typing___Optional,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


class ClickLocation(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...

    @property
    def city(self) -> google___protobuf___wrappers_pb2___StringValue: ...

    @property
    def country(self) -> google___protobuf___wrappers_pb2___StringValue: ...

    @property
    def metro(self) -> google___protobuf___wrappers_pb2___StringValue: ...

    @property
    def most_specific(self) -> google___protobuf___wrappers_pb2___StringValue: ...

    @property
    def region(self) -> google___protobuf___wrappers_pb2___StringValue: ...

    def __init__(self,
        *,
        city : typing___Optional[google___protobuf___wrappers_pb2___StringValue] = None,
        country : typing___Optional[google___protobuf___wrappers_pb2___StringValue] = None,
        metro : typing___Optional[google___protobuf___wrappers_pb2___StringValue] = None,
        most_specific : typing___Optional[google___protobuf___wrappers_pb2___StringValue] = None,
        region : typing___Optional[google___protobuf___wrappers_pb2___StringValue] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> ClickLocation: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"city",u"country",u"metro",u"most_specific",u"region"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"city",u"country",u"metro",u"most_specific",u"region"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"city",b"city",u"country",b"country",u"metro",b"metro",u"most_specific",b"most_specific",u"region",b"region"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"city",b"city",u"country",b"country",u"metro",b"metro",u"most_specific",b"most_specific",u"region",b"region"]) -> None: ...
