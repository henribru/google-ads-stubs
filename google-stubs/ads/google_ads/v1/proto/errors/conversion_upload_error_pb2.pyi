# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    List as typing___List,
    Tuple as typing___Tuple,
    cast as typing___cast,
)


class ConversionUploadErrorEnum(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class ConversionUploadError(int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: int) -> str: ...
        @classmethod
        def Value(cls, name: str) -> ConversionUploadErrorEnum.ConversionUploadError: ...
        @classmethod
        def keys(cls) -> typing___List[str]: ...
        @classmethod
        def values(cls) -> typing___List[ConversionUploadErrorEnum.ConversionUploadError]: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[str, ConversionUploadErrorEnum.ConversionUploadError]]: ...
        UNSPECIFIED = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 0)
        UNKNOWN = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 1)
        TOO_MANY_CONVERSIONS_IN_REQUEST = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 2)
        UNPARSEABLE_GCLID = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 3)
        CONVERSION_PRECEDES_GCLID = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 4)
        EXPIRED_GCLID = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 5)
        TOO_RECENT_GCLID = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 6)
        GCLID_NOT_FOUND = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 7)
        UNAUTHORIZED_CUSTOMER = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 8)
        INVALID_CONVERSION_ACTION = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 9)
        TOO_RECENT_CONVERSION_ACTION = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 10)
        CONVERSION_TRACKING_NOT_ENABLED_AT_IMPRESSION_TIME = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 11)
        EXTERNAL_ATTRIBUTION_DATA_SET_FOR_NON_EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 12)
        EXTERNAL_ATTRIBUTION_DATA_NOT_SET_FOR_EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 13)
        ORDER_ID_NOT_PERMITTED_FOR_EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 14)
        ORDER_ID_ALREADY_IN_USE = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 15)
        DUPLICATE_ORDER_ID = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 16)
        TOO_RECENT_CALL = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 17)
        EXPIRED_CALL = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 18)
        CALL_NOT_FOUND = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 19)
        CONVERSION_PRECEDES_CALL = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 20)
        CONVERSION_TRACKING_NOT_ENABLED_AT_CALL_TIME = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 21)
        UNPARSEABLE_CALLERS_PHONE_NUMBER = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 22)
    UNSPECIFIED = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 0)
    UNKNOWN = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 1)
    TOO_MANY_CONVERSIONS_IN_REQUEST = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 2)
    UNPARSEABLE_GCLID = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 3)
    CONVERSION_PRECEDES_GCLID = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 4)
    EXPIRED_GCLID = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 5)
    TOO_RECENT_GCLID = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 6)
    GCLID_NOT_FOUND = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 7)
    UNAUTHORIZED_CUSTOMER = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 8)
    INVALID_CONVERSION_ACTION = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 9)
    TOO_RECENT_CONVERSION_ACTION = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 10)
    CONVERSION_TRACKING_NOT_ENABLED_AT_IMPRESSION_TIME = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 11)
    EXTERNAL_ATTRIBUTION_DATA_SET_FOR_NON_EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 12)
    EXTERNAL_ATTRIBUTION_DATA_NOT_SET_FOR_EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 13)
    ORDER_ID_NOT_PERMITTED_FOR_EXTERNALLY_ATTRIBUTED_CONVERSION_ACTION = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 14)
    ORDER_ID_ALREADY_IN_USE = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 15)
    DUPLICATE_ORDER_ID = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 16)
    TOO_RECENT_CALL = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 17)
    EXPIRED_CALL = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 18)
    CALL_NOT_FOUND = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 19)
    CONVERSION_PRECEDES_CALL = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 20)
    CONVERSION_TRACKING_NOT_ENABLED_AT_CALL_TIME = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 21)
    UNPARSEABLE_CALLERS_PHONE_NUMBER = typing___cast(ConversionUploadErrorEnum.ConversionUploadError, 22)


    def __init__(self,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> ConversionUploadErrorEnum: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
