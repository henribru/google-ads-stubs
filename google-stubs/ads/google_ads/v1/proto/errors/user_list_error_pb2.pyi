# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from typing import (
    List as typing___List,
    Tuple as typing___Tuple,
    cast as typing___cast,
)


class UserListErrorEnum(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    class UserListError(int):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        @classmethod
        def Name(cls, number: int) -> str: ...
        @classmethod
        def Value(cls, name: str) -> UserListErrorEnum.UserListError: ...
        @classmethod
        def keys(cls) -> typing___List[str]: ...
        @classmethod
        def values(cls) -> typing___List[UserListErrorEnum.UserListError]: ...
        @classmethod
        def items(cls) -> typing___List[typing___Tuple[str, UserListErrorEnum.UserListError]]: ...
        UNSPECIFIED = typing___cast(UserListErrorEnum.UserListError, 0)
        UNKNOWN = typing___cast(UserListErrorEnum.UserListError, 1)
        EXTERNAL_REMARKETING_USER_LIST_MUTATE_NOT_SUPPORTED = typing___cast(UserListErrorEnum.UserListError, 2)
        CONCRETE_TYPE_REQUIRED = typing___cast(UserListErrorEnum.UserListError, 3)
        CONVERSION_TYPE_ID_REQUIRED = typing___cast(UserListErrorEnum.UserListError, 4)
        DUPLICATE_CONVERSION_TYPES = typing___cast(UserListErrorEnum.UserListError, 5)
        INVALID_CONVERSION_TYPE = typing___cast(UserListErrorEnum.UserListError, 6)
        INVALID_DESCRIPTION = typing___cast(UserListErrorEnum.UserListError, 7)
        INVALID_NAME = typing___cast(UserListErrorEnum.UserListError, 8)
        INVALID_TYPE = typing___cast(UserListErrorEnum.UserListError, 9)
        CAN_NOT_ADD_LOGICAL_LIST_AS_LOGICAL_LIST_OPERAND = typing___cast(UserListErrorEnum.UserListError, 10)
        INVALID_USER_LIST_LOGICAL_RULE_OPERAND = typing___cast(UserListErrorEnum.UserListError, 11)
        NAME_ALREADY_USED = typing___cast(UserListErrorEnum.UserListError, 12)
        NEW_CONVERSION_TYPE_NAME_REQUIRED = typing___cast(UserListErrorEnum.UserListError, 13)
        CONVERSION_TYPE_NAME_ALREADY_USED = typing___cast(UserListErrorEnum.UserListError, 14)
        OWNERSHIP_REQUIRED_FOR_SET = typing___cast(UserListErrorEnum.UserListError, 15)
        USER_LIST_MUTATE_NOT_SUPPORTED = typing___cast(UserListErrorEnum.UserListError, 16)
        INVALID_RULE = typing___cast(UserListErrorEnum.UserListError, 17)
        INVALID_DATE_RANGE = typing___cast(UserListErrorEnum.UserListError, 27)
        CAN_NOT_MUTATE_SENSITIVE_USERLIST = typing___cast(UserListErrorEnum.UserListError, 28)
        MAX_NUM_RULEBASED_USERLISTS = typing___cast(UserListErrorEnum.UserListError, 29)
        CANNOT_MODIFY_BILLABLE_RECORD_COUNT = typing___cast(UserListErrorEnum.UserListError, 30)
        APP_ID_NOT_SET = typing___cast(UserListErrorEnum.UserListError, 31)
        USERLIST_NAME_IS_RESERVED_FOR_SYSTEM_LIST = typing___cast(UserListErrorEnum.UserListError, 32)
        ADVERTISER_NOT_WHITELISTED_FOR_USING_UPLOADED_DATA = typing___cast(UserListErrorEnum.UserListError, 33)
        RULE_TYPE_IS_NOT_SUPPORTED = typing___cast(UserListErrorEnum.UserListError, 34)
        CAN_NOT_ADD_A_SIMILAR_USERLIST_AS_LOGICAL_LIST_OPERAND = typing___cast(UserListErrorEnum.UserListError, 35)
        CAN_NOT_MIX_CRM_BASED_IN_LOGICAL_LIST_WITH_OTHER_LISTS = typing___cast(UserListErrorEnum.UserListError, 36)
    UNSPECIFIED = typing___cast(UserListErrorEnum.UserListError, 0)
    UNKNOWN = typing___cast(UserListErrorEnum.UserListError, 1)
    EXTERNAL_REMARKETING_USER_LIST_MUTATE_NOT_SUPPORTED = typing___cast(UserListErrorEnum.UserListError, 2)
    CONCRETE_TYPE_REQUIRED = typing___cast(UserListErrorEnum.UserListError, 3)
    CONVERSION_TYPE_ID_REQUIRED = typing___cast(UserListErrorEnum.UserListError, 4)
    DUPLICATE_CONVERSION_TYPES = typing___cast(UserListErrorEnum.UserListError, 5)
    INVALID_CONVERSION_TYPE = typing___cast(UserListErrorEnum.UserListError, 6)
    INVALID_DESCRIPTION = typing___cast(UserListErrorEnum.UserListError, 7)
    INVALID_NAME = typing___cast(UserListErrorEnum.UserListError, 8)
    INVALID_TYPE = typing___cast(UserListErrorEnum.UserListError, 9)
    CAN_NOT_ADD_LOGICAL_LIST_AS_LOGICAL_LIST_OPERAND = typing___cast(UserListErrorEnum.UserListError, 10)
    INVALID_USER_LIST_LOGICAL_RULE_OPERAND = typing___cast(UserListErrorEnum.UserListError, 11)
    NAME_ALREADY_USED = typing___cast(UserListErrorEnum.UserListError, 12)
    NEW_CONVERSION_TYPE_NAME_REQUIRED = typing___cast(UserListErrorEnum.UserListError, 13)
    CONVERSION_TYPE_NAME_ALREADY_USED = typing___cast(UserListErrorEnum.UserListError, 14)
    OWNERSHIP_REQUIRED_FOR_SET = typing___cast(UserListErrorEnum.UserListError, 15)
    USER_LIST_MUTATE_NOT_SUPPORTED = typing___cast(UserListErrorEnum.UserListError, 16)
    INVALID_RULE = typing___cast(UserListErrorEnum.UserListError, 17)
    INVALID_DATE_RANGE = typing___cast(UserListErrorEnum.UserListError, 27)
    CAN_NOT_MUTATE_SENSITIVE_USERLIST = typing___cast(UserListErrorEnum.UserListError, 28)
    MAX_NUM_RULEBASED_USERLISTS = typing___cast(UserListErrorEnum.UserListError, 29)
    CANNOT_MODIFY_BILLABLE_RECORD_COUNT = typing___cast(UserListErrorEnum.UserListError, 30)
    APP_ID_NOT_SET = typing___cast(UserListErrorEnum.UserListError, 31)
    USERLIST_NAME_IS_RESERVED_FOR_SYSTEM_LIST = typing___cast(UserListErrorEnum.UserListError, 32)
    ADVERTISER_NOT_WHITELISTED_FOR_USING_UPLOADED_DATA = typing___cast(UserListErrorEnum.UserListError, 33)
    RULE_TYPE_IS_NOT_SUPPORTED = typing___cast(UserListErrorEnum.UserListError, 34)
    CAN_NOT_ADD_A_SIMILAR_USERLIST_AS_LOGICAL_LIST_OPERAND = typing___cast(UserListErrorEnum.UserListError, 35)
    CAN_NOT_MIX_CRM_BASED_IN_LOGICAL_LIST_WITH_OTHER_LISTS = typing___cast(UserListErrorEnum.UserListError, 36)


    def __init__(self,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> UserListErrorEnum: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
