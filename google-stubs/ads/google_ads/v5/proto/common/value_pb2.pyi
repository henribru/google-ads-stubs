# @generated by mypy-protobuf.  Do not edit manually!
import sys
from typing import Optional as typing___Optional, Text as typing___Text

from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)
from google.protobuf.message import Message as google___protobuf___message___Message
from typing_extensions import Literal as typing_extensions___Literal

builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int

DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class Value(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    boolean_value: builtin___bool = ...
    int64_value: builtin___int = ...
    float_value: builtin___float = ...
    double_value: builtin___float = ...
    string_value: typing___Text = ...
    def __init__(
        self,
        *,
        boolean_value: typing___Optional[builtin___bool] = None,
        int64_value: typing___Optional[builtin___int] = None,
        float_value: typing___Optional[builtin___float] = None,
        double_value: typing___Optional[builtin___float] = None,
        string_value: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal[
            "boolean_value",
            b"boolean_value",
            "double_value",
            b"double_value",
            "float_value",
            b"float_value",
            "int64_value",
            b"int64_value",
            "string_value",
            b"string_value",
            "value",
            b"value",
        ],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "boolean_value",
            b"boolean_value",
            "double_value",
            b"double_value",
            "float_value",
            b"float_value",
            "int64_value",
            b"int64_value",
            "string_value",
            b"string_value",
            "value",
            b"value",
        ],
    ) -> None: ...
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["value", b"value"]
    ) -> typing_extensions___Literal[
        "boolean_value", "int64_value", "float_value", "double_value", "string_value"
    ]: ...

type___Value = Value
