# @generated by mypy-protobuf.  Do not edit manually!
import sys
from typing import NewType as typing___NewType, cast as typing___cast

from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)
from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)
from google.protobuf.message import Message as google___protobuf___message___Message

builtin___int = int

DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class UserListRuleTypeEnum(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    UserListRuleTypeValue = typing___NewType("UserListRuleTypeValue", builtin___int)
    type___UserListRuleTypeValue = UserListRuleTypeValue
    UserListRuleType: _UserListRuleType
    class _UserListRuleType(
        google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[
            UserListRuleTypeEnum.UserListRuleTypeValue
        ]
    ):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        UNSPECIFIED = typing___cast(UserListRuleTypeEnum.UserListRuleTypeValue, 0)
        UNKNOWN = typing___cast(UserListRuleTypeEnum.UserListRuleTypeValue, 1)
        AND_OF_ORS = typing___cast(UserListRuleTypeEnum.UserListRuleTypeValue, 2)
        OR_OF_ANDS = typing___cast(UserListRuleTypeEnum.UserListRuleTypeValue, 3)
    UNSPECIFIED = typing___cast(UserListRuleTypeEnum.UserListRuleTypeValue, 0)
    UNKNOWN = typing___cast(UserListRuleTypeEnum.UserListRuleTypeValue, 1)
    AND_OF_ORS = typing___cast(UserListRuleTypeEnum.UserListRuleTypeValue, 2)
    OR_OF_ANDS = typing___cast(UserListRuleTypeEnum.UserListRuleTypeValue, 3)
    type___UserListRuleType = UserListRuleType
    def __init__(self,) -> None: ...

type___UserListRuleTypeEnum = UserListRuleTypeEnum
