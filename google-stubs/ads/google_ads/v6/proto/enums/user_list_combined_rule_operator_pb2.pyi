# @generated by mypy-protobuf.  Do not edit manually!
import sys
from typing import NewType as typing___NewType, cast as typing___cast

from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)
from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)
from google.protobuf.message import Message as google___protobuf___message___Message

builtin___int = int

DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class UserListCombinedRuleOperatorEnum(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    UserListCombinedRuleOperatorValue = typing___NewType(
        "UserListCombinedRuleOperatorValue", builtin___int
    )
    type___UserListCombinedRuleOperatorValue = UserListCombinedRuleOperatorValue
    UserListCombinedRuleOperator: _UserListCombinedRuleOperator
    class _UserListCombinedRuleOperator(
        google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[
            UserListCombinedRuleOperatorEnum.UserListCombinedRuleOperatorValue
        ]
    ):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        UNSPECIFIED = typing___cast(
            UserListCombinedRuleOperatorEnum.UserListCombinedRuleOperatorValue, 0
        )
        UNKNOWN = typing___cast(
            UserListCombinedRuleOperatorEnum.UserListCombinedRuleOperatorValue, 1
        )
        AND = typing___cast(
            UserListCombinedRuleOperatorEnum.UserListCombinedRuleOperatorValue, 2
        )
        AND_NOT = typing___cast(
            UserListCombinedRuleOperatorEnum.UserListCombinedRuleOperatorValue, 3
        )
    UNSPECIFIED = typing___cast(
        UserListCombinedRuleOperatorEnum.UserListCombinedRuleOperatorValue, 0
    )
    UNKNOWN = typing___cast(
        UserListCombinedRuleOperatorEnum.UserListCombinedRuleOperatorValue, 1
    )
    AND = typing___cast(
        UserListCombinedRuleOperatorEnum.UserListCombinedRuleOperatorValue, 2
    )
    AND_NOT = typing___cast(
        UserListCombinedRuleOperatorEnum.UserListCombinedRuleOperatorValue, 3
    )
    type___UserListCombinedRuleOperator = UserListCombinedRuleOperator
    def __init__(self,) -> None: ...

type___UserListCombinedRuleOperatorEnum = UserListCombinedRuleOperatorEnum
