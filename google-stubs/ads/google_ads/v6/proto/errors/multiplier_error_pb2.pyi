# @generated by mypy-protobuf.  Do not edit manually!
import sys
from typing import NewType as typing___NewType, cast as typing___cast

from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)
from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)
from google.protobuf.message import Message as google___protobuf___message___Message

builtin___int = int

DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class MultiplierErrorEnum(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    MultiplierErrorValue = typing___NewType("MultiplierErrorValue", builtin___int)
    type___MultiplierErrorValue = MultiplierErrorValue
    MultiplierError: _MultiplierError
    class _MultiplierError(
        google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[
            MultiplierErrorEnum.MultiplierErrorValue
        ]
    ):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        UNSPECIFIED = typing___cast(MultiplierErrorEnum.MultiplierErrorValue, 0)
        UNKNOWN = typing___cast(MultiplierErrorEnum.MultiplierErrorValue, 1)
        MULTIPLIER_TOO_HIGH = typing___cast(MultiplierErrorEnum.MultiplierErrorValue, 2)
        MULTIPLIER_TOO_LOW = typing___cast(MultiplierErrorEnum.MultiplierErrorValue, 3)
        TOO_MANY_FRACTIONAL_DIGITS = typing___cast(
            MultiplierErrorEnum.MultiplierErrorValue, 4
        )
        MULTIPLIER_NOT_ALLOWED_FOR_BIDDING_STRATEGY = typing___cast(
            MultiplierErrorEnum.MultiplierErrorValue, 5
        )
        MULTIPLIER_NOT_ALLOWED_WHEN_BASE_BID_IS_MISSING = typing___cast(
            MultiplierErrorEnum.MultiplierErrorValue, 6
        )
        NO_MULTIPLIER_SPECIFIED = typing___cast(
            MultiplierErrorEnum.MultiplierErrorValue, 7
        )
        MULTIPLIER_CAUSES_BID_TO_EXCEED_DAILY_BUDGET = typing___cast(
            MultiplierErrorEnum.MultiplierErrorValue, 8
        )
        MULTIPLIER_CAUSES_BID_TO_EXCEED_MONTHLY_BUDGET = typing___cast(
            MultiplierErrorEnum.MultiplierErrorValue, 9
        )
        MULTIPLIER_CAUSES_BID_TO_EXCEED_CUSTOM_BUDGET = typing___cast(
            MultiplierErrorEnum.MultiplierErrorValue, 10
        )
        MULTIPLIER_CAUSES_BID_TO_EXCEED_MAX_ALLOWED_BID = typing___cast(
            MultiplierErrorEnum.MultiplierErrorValue, 11
        )
        BID_LESS_THAN_MIN_ALLOWED_BID_WITH_MULTIPLIER = typing___cast(
            MultiplierErrorEnum.MultiplierErrorValue, 12
        )
        MULTIPLIER_AND_BIDDING_STRATEGY_TYPE_MISMATCH = typing___cast(
            MultiplierErrorEnum.MultiplierErrorValue, 13
        )
    UNSPECIFIED = typing___cast(MultiplierErrorEnum.MultiplierErrorValue, 0)
    UNKNOWN = typing___cast(MultiplierErrorEnum.MultiplierErrorValue, 1)
    MULTIPLIER_TOO_HIGH = typing___cast(MultiplierErrorEnum.MultiplierErrorValue, 2)
    MULTIPLIER_TOO_LOW = typing___cast(MultiplierErrorEnum.MultiplierErrorValue, 3)
    TOO_MANY_FRACTIONAL_DIGITS = typing___cast(
        MultiplierErrorEnum.MultiplierErrorValue, 4
    )
    MULTIPLIER_NOT_ALLOWED_FOR_BIDDING_STRATEGY = typing___cast(
        MultiplierErrorEnum.MultiplierErrorValue, 5
    )
    MULTIPLIER_NOT_ALLOWED_WHEN_BASE_BID_IS_MISSING = typing___cast(
        MultiplierErrorEnum.MultiplierErrorValue, 6
    )
    NO_MULTIPLIER_SPECIFIED = typing___cast(MultiplierErrorEnum.MultiplierErrorValue, 7)
    MULTIPLIER_CAUSES_BID_TO_EXCEED_DAILY_BUDGET = typing___cast(
        MultiplierErrorEnum.MultiplierErrorValue, 8
    )
    MULTIPLIER_CAUSES_BID_TO_EXCEED_MONTHLY_BUDGET = typing___cast(
        MultiplierErrorEnum.MultiplierErrorValue, 9
    )
    MULTIPLIER_CAUSES_BID_TO_EXCEED_CUSTOM_BUDGET = typing___cast(
        MultiplierErrorEnum.MultiplierErrorValue, 10
    )
    MULTIPLIER_CAUSES_BID_TO_EXCEED_MAX_ALLOWED_BID = typing___cast(
        MultiplierErrorEnum.MultiplierErrorValue, 11
    )
    BID_LESS_THAN_MIN_ALLOWED_BID_WITH_MULTIPLIER = typing___cast(
        MultiplierErrorEnum.MultiplierErrorValue, 12
    )
    MULTIPLIER_AND_BIDDING_STRATEGY_TYPE_MISMATCH = typing___cast(
        MultiplierErrorEnum.MultiplierErrorValue, 13
    )
    type___MultiplierError = MultiplierError
    def __init__(self,) -> None: ...

type___MultiplierErrorEnum = MultiplierErrorEnum
