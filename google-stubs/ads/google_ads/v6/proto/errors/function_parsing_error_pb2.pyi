# @generated by mypy-protobuf.  Do not edit manually!
import sys
from typing import NewType as typing___NewType, cast as typing___cast

from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    EnumDescriptor as google___protobuf___descriptor___EnumDescriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)
from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper as google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper,
)
from google.protobuf.message import Message as google___protobuf___message___Message

builtin___int = int

DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class FunctionParsingErrorEnum(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    FunctionParsingErrorValue = typing___NewType(
        "FunctionParsingErrorValue", builtin___int
    )
    type___FunctionParsingErrorValue = FunctionParsingErrorValue
    FunctionParsingError: _FunctionParsingError
    class _FunctionParsingError(
        google___protobuf___internal___enum_type_wrapper____EnumTypeWrapper[
            FunctionParsingErrorEnum.FunctionParsingErrorValue
        ]
    ):
        DESCRIPTOR: google___protobuf___descriptor___EnumDescriptor = ...
        UNSPECIFIED = typing___cast(
            FunctionParsingErrorEnum.FunctionParsingErrorValue, 0
        )
        UNKNOWN = typing___cast(FunctionParsingErrorEnum.FunctionParsingErrorValue, 1)
        NO_MORE_INPUT = typing___cast(
            FunctionParsingErrorEnum.FunctionParsingErrorValue, 2
        )
        EXPECTED_CHARACTER = typing___cast(
            FunctionParsingErrorEnum.FunctionParsingErrorValue, 3
        )
        UNEXPECTED_SEPARATOR = typing___cast(
            FunctionParsingErrorEnum.FunctionParsingErrorValue, 4
        )
        UNMATCHED_LEFT_BRACKET = typing___cast(
            FunctionParsingErrorEnum.FunctionParsingErrorValue, 5
        )
        UNMATCHED_RIGHT_BRACKET = typing___cast(
            FunctionParsingErrorEnum.FunctionParsingErrorValue, 6
        )
        TOO_MANY_NESTED_FUNCTIONS = typing___cast(
            FunctionParsingErrorEnum.FunctionParsingErrorValue, 7
        )
        MISSING_RIGHT_HAND_OPERAND = typing___cast(
            FunctionParsingErrorEnum.FunctionParsingErrorValue, 8
        )
        INVALID_OPERATOR_NAME = typing___cast(
            FunctionParsingErrorEnum.FunctionParsingErrorValue, 9
        )
        FEED_ATTRIBUTE_OPERAND_ARGUMENT_NOT_INTEGER = typing___cast(
            FunctionParsingErrorEnum.FunctionParsingErrorValue, 10
        )
        NO_OPERANDS = typing___cast(
            FunctionParsingErrorEnum.FunctionParsingErrorValue, 11
        )
        TOO_MANY_OPERANDS = typing___cast(
            FunctionParsingErrorEnum.FunctionParsingErrorValue, 12
        )
    UNSPECIFIED = typing___cast(FunctionParsingErrorEnum.FunctionParsingErrorValue, 0)
    UNKNOWN = typing___cast(FunctionParsingErrorEnum.FunctionParsingErrorValue, 1)
    NO_MORE_INPUT = typing___cast(FunctionParsingErrorEnum.FunctionParsingErrorValue, 2)
    EXPECTED_CHARACTER = typing___cast(
        FunctionParsingErrorEnum.FunctionParsingErrorValue, 3
    )
    UNEXPECTED_SEPARATOR = typing___cast(
        FunctionParsingErrorEnum.FunctionParsingErrorValue, 4
    )
    UNMATCHED_LEFT_BRACKET = typing___cast(
        FunctionParsingErrorEnum.FunctionParsingErrorValue, 5
    )
    UNMATCHED_RIGHT_BRACKET = typing___cast(
        FunctionParsingErrorEnum.FunctionParsingErrorValue, 6
    )
    TOO_MANY_NESTED_FUNCTIONS = typing___cast(
        FunctionParsingErrorEnum.FunctionParsingErrorValue, 7
    )
    MISSING_RIGHT_HAND_OPERAND = typing___cast(
        FunctionParsingErrorEnum.FunctionParsingErrorValue, 8
    )
    INVALID_OPERATOR_NAME = typing___cast(
        FunctionParsingErrorEnum.FunctionParsingErrorValue, 9
    )
    FEED_ATTRIBUTE_OPERAND_ARGUMENT_NOT_INTEGER = typing___cast(
        FunctionParsingErrorEnum.FunctionParsingErrorValue, 10
    )
    NO_OPERANDS = typing___cast(FunctionParsingErrorEnum.FunctionParsingErrorValue, 11)
    TOO_MANY_OPERANDS = typing___cast(
        FunctionParsingErrorEnum.FunctionParsingErrorValue, 12
    )
    type___FunctionParsingError = FunctionParsingError
    def __init__(self,) -> None: ...

type___FunctionParsingErrorEnum = FunctionParsingErrorEnum
