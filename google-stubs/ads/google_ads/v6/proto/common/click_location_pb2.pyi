# @generated by mypy-protobuf.  Do not edit manually!
import sys
from typing import (
    Optional as typing___Optional,
    Text as typing___Text,
    overload as typing___overload,
)

from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)
from google.protobuf.message import Message as google___protobuf___message___Message
from typing_extensions import Literal as typing_extensions___Literal

builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int

DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class ClickLocation(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    city: typing___Text = ...
    country: typing___Text = ...
    metro: typing___Text = ...
    most_specific: typing___Text = ...
    region: typing___Text = ...
    def __init__(
        self,
        *,
        city: typing___Optional[typing___Text] = None,
        country: typing___Optional[typing___Text] = None,
        metro: typing___Optional[typing___Text] = None,
        most_specific: typing___Optional[typing___Text] = None,
        region: typing___Optional[typing___Text] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal[
            "_city",
            b"_city",
            "_country",
            b"_country",
            "_metro",
            b"_metro",
            "_most_specific",
            b"_most_specific",
            "_region",
            b"_region",
            "city",
            b"city",
            "country",
            b"country",
            "metro",
            b"metro",
            "most_specific",
            b"most_specific",
            "region",
            b"region",
        ],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "_city",
            b"_city",
            "_country",
            b"_country",
            "_metro",
            b"_metro",
            "_most_specific",
            b"_most_specific",
            "_region",
            b"_region",
            "city",
            b"city",
            "country",
            b"country",
            "metro",
            b"metro",
            "most_specific",
            b"most_specific",
            "region",
            b"region",
        ],
    ) -> None: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_city", b"_city"]
    ) -> typing_extensions___Literal["city"]: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_country", b"_country"]
    ) -> typing_extensions___Literal["country"]: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_metro", b"_metro"]
    ) -> typing_extensions___Literal["metro"]: ...
    @typing___overload
    def WhichOneof(
        self,
        oneof_group: typing_extensions___Literal["_most_specific", b"_most_specific"],
    ) -> typing_extensions___Literal["most_specific"]: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_region", b"_region"]
    ) -> typing_extensions___Literal["region"]: ...

type___ClickLocation = ClickLocation
