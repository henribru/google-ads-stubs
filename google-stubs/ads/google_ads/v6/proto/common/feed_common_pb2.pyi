# @generated by mypy-protobuf.  Do not edit manually!
import sys
from typing import (
    Optional as typing___Optional,
    Text as typing___Text,
    overload as typing___overload,
)

from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)
from google.protobuf.message import Message as google___protobuf___message___Message
from typing_extensions import Literal as typing_extensions___Literal

builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int

DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class Money(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    currency_code: typing___Text = ...
    amount_micros: builtin___int = ...
    def __init__(
        self,
        *,
        currency_code: typing___Optional[typing___Text] = None,
        amount_micros: typing___Optional[builtin___int] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal[
            "_amount_micros",
            b"_amount_micros",
            "_currency_code",
            b"_currency_code",
            "amount_micros",
            b"amount_micros",
            "currency_code",
            b"currency_code",
        ],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "_amount_micros",
            b"_amount_micros",
            "_currency_code",
            b"_currency_code",
            "amount_micros",
            b"amount_micros",
            "currency_code",
            b"currency_code",
        ],
    ) -> None: ...
    @typing___overload
    def WhichOneof(
        self,
        oneof_group: typing_extensions___Literal["_amount_micros", b"_amount_micros"],
    ) -> typing_extensions___Literal["amount_micros"]: ...
    @typing___overload
    def WhichOneof(
        self,
        oneof_group: typing_extensions___Literal["_currency_code", b"_currency_code"],
    ) -> typing_extensions___Literal["currency_code"]: ...

type___Money = Money
