"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class DynamicSearchAdsSearchTermView(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    RESOURCE_NAME_FIELD_NUMBER: builtins.int
    SEARCH_TERM_FIELD_NUMBER: builtins.int
    HEADLINE_FIELD_NUMBER: builtins.int
    LANDING_PAGE_FIELD_NUMBER: builtins.int
    PAGE_URL_FIELD_NUMBER: builtins.int
    HAS_NEGATIVE_KEYWORD_FIELD_NUMBER: builtins.int
    HAS_MATCHING_KEYWORD_FIELD_NUMBER: builtins.int
    HAS_NEGATIVE_URL_FIELD_NUMBER: builtins.int
    resource_name: typing.Text = ...
    search_term: typing.Text = ...
    headline: typing.Text = ...
    landing_page: typing.Text = ...
    page_url: typing.Text = ...
    has_negative_keyword: builtins.bool = ...
    has_matching_keyword: builtins.bool = ...
    has_negative_url: builtins.bool = ...
    def __init__(
        self,
        *,
        resource_name: typing.Text = ...,
        search_term: typing.Text = ...,
        headline: typing.Text = ...,
        landing_page: typing.Text = ...,
        page_url: typing.Text = ...,
        has_negative_keyword: builtins.bool = ...,
        has_matching_keyword: builtins.bool = ...,
        has_negative_url: builtins.bool = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "_has_matching_keyword",
            b"_has_matching_keyword",
            "_has_negative_keyword",
            b"_has_negative_keyword",
            "_has_negative_url",
            b"_has_negative_url",
            "_headline",
            b"_headline",
            "_landing_page",
            b"_landing_page",
            "_page_url",
            b"_page_url",
            "_search_term",
            b"_search_term",
            "has_matching_keyword",
            b"has_matching_keyword",
            "has_negative_keyword",
            b"has_negative_keyword",
            "has_negative_url",
            b"has_negative_url",
            "headline",
            b"headline",
            "landing_page",
            b"landing_page",
            "page_url",
            b"page_url",
            "search_term",
            b"search_term",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "_has_matching_keyword",
            b"_has_matching_keyword",
            "_has_negative_keyword",
            b"_has_negative_keyword",
            "_has_negative_url",
            b"_has_negative_url",
            "_headline",
            b"_headline",
            "_landing_page",
            b"_landing_page",
            "_page_url",
            b"_page_url",
            "_search_term",
            b"_search_term",
            "has_matching_keyword",
            b"has_matching_keyword",
            "has_negative_keyword",
            b"has_negative_keyword",
            "has_negative_url",
            b"has_negative_url",
            "headline",
            b"headline",
            "landing_page",
            b"landing_page",
            "page_url",
            b"page_url",
            "resource_name",
            b"resource_name",
            "search_term",
            b"search_term",
        ],
    ) -> None: ...
    @typing.overload
    def WhichOneof(
        self,
        oneof_group: typing_extensions.Literal[
            "_has_matching_keyword", b"_has_matching_keyword"
        ],
    ) -> typing_extensions.Literal["has_matching_keyword"]: ...
    @typing.overload
    def WhichOneof(
        self,
        oneof_group: typing_extensions.Literal[
            "_has_negative_keyword", b"_has_negative_keyword"
        ],
    ) -> typing_extensions.Literal["has_negative_keyword"]: ...
    @typing.overload
    def WhichOneof(
        self,
        oneof_group: typing_extensions.Literal[
            "_has_negative_url", b"_has_negative_url"
        ],
    ) -> typing_extensions.Literal["has_negative_url"]: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_headline", b"_headline"]
    ) -> typing_extensions.Literal["headline"]: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_landing_page", b"_landing_page"]
    ) -> typing_extensions.Literal["landing_page"]: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_page_url", b"_page_url"]
    ) -> typing_extensions.Literal["page_url"]: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_search_term", b"_search_term"]
    ) -> typing_extensions.Literal["search_term"]: ...

global___DynamicSearchAdsSearchTermView = DynamicSearchAdsSearchTermView
