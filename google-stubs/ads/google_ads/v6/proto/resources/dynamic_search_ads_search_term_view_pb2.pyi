# @generated by mypy-protobuf.  Do not edit manually!
import sys
from typing import (
    Optional as typing___Optional,
    Text as typing___Text,
    overload as typing___overload,
)

from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)
from google.protobuf.message import Message as google___protobuf___message___Message
from typing_extensions import Literal as typing_extensions___Literal

builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int

DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class DynamicSearchAdsSearchTermView(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    resource_name: typing___Text = ...
    search_term: typing___Text = ...
    headline: typing___Text = ...
    landing_page: typing___Text = ...
    page_url: typing___Text = ...
    has_negative_keyword: builtin___bool = ...
    has_matching_keyword: builtin___bool = ...
    has_negative_url: builtin___bool = ...
    def __init__(
        self,
        *,
        resource_name: typing___Optional[typing___Text] = None,
        search_term: typing___Optional[typing___Text] = None,
        headline: typing___Optional[typing___Text] = None,
        landing_page: typing___Optional[typing___Text] = None,
        page_url: typing___Optional[typing___Text] = None,
        has_negative_keyword: typing___Optional[builtin___bool] = None,
        has_matching_keyword: typing___Optional[builtin___bool] = None,
        has_negative_url: typing___Optional[builtin___bool] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal[
            "_has_matching_keyword",
            b"_has_matching_keyword",
            "_has_negative_keyword",
            b"_has_negative_keyword",
            "_has_negative_url",
            b"_has_negative_url",
            "_headline",
            b"_headline",
            "_landing_page",
            b"_landing_page",
            "_page_url",
            b"_page_url",
            "_search_term",
            b"_search_term",
            "has_matching_keyword",
            b"has_matching_keyword",
            "has_negative_keyword",
            b"has_negative_keyword",
            "has_negative_url",
            b"has_negative_url",
            "headline",
            b"headline",
            "landing_page",
            b"landing_page",
            "page_url",
            b"page_url",
            "search_term",
            b"search_term",
        ],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "_has_matching_keyword",
            b"_has_matching_keyword",
            "_has_negative_keyword",
            b"_has_negative_keyword",
            "_has_negative_url",
            b"_has_negative_url",
            "_headline",
            b"_headline",
            "_landing_page",
            b"_landing_page",
            "_page_url",
            b"_page_url",
            "_search_term",
            b"_search_term",
            "has_matching_keyword",
            b"has_matching_keyword",
            "has_negative_keyword",
            b"has_negative_keyword",
            "has_negative_url",
            b"has_negative_url",
            "headline",
            b"headline",
            "landing_page",
            b"landing_page",
            "page_url",
            b"page_url",
            "resource_name",
            b"resource_name",
            "search_term",
            b"search_term",
        ],
    ) -> None: ...
    @typing___overload
    def WhichOneof(
        self,
        oneof_group: typing_extensions___Literal[
            "_has_matching_keyword", b"_has_matching_keyword"
        ],
    ) -> typing_extensions___Literal["has_matching_keyword"]: ...
    @typing___overload
    def WhichOneof(
        self,
        oneof_group: typing_extensions___Literal[
            "_has_negative_keyword", b"_has_negative_keyword"
        ],
    ) -> typing_extensions___Literal["has_negative_keyword"]: ...
    @typing___overload
    def WhichOneof(
        self,
        oneof_group: typing_extensions___Literal[
            "_has_negative_url", b"_has_negative_url"
        ],
    ) -> typing_extensions___Literal["has_negative_url"]: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_headline", b"_headline"]
    ) -> typing_extensions___Literal["headline"]: ...
    @typing___overload
    def WhichOneof(
        self,
        oneof_group: typing_extensions___Literal["_landing_page", b"_landing_page"],
    ) -> typing_extensions___Literal["landing_page"]: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_page_url", b"_page_url"]
    ) -> typing_extensions___Literal["page_url"]: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_search_term", b"_search_term"]
    ) -> typing_extensions___Literal["search_term"]: ...

type___DynamicSearchAdsSearchTermView = DynamicSearchAdsSearchTermView
