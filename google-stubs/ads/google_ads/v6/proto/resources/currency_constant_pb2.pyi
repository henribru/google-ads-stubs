# @generated by mypy-protobuf.  Do not edit manually!
import sys
from typing import (
    Optional as typing___Optional,
    Text as typing___Text,
    overload as typing___overload,
)

from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)
from google.protobuf.message import Message as google___protobuf___message___Message
from typing_extensions import Literal as typing_extensions___Literal

builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int

DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class CurrencyConstant(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    resource_name: typing___Text = ...
    code: typing___Text = ...
    name: typing___Text = ...
    symbol: typing___Text = ...
    billable_unit_micros: builtin___int = ...
    def __init__(
        self,
        *,
        resource_name: typing___Optional[typing___Text] = None,
        code: typing___Optional[typing___Text] = None,
        name: typing___Optional[typing___Text] = None,
        symbol: typing___Optional[typing___Text] = None,
        billable_unit_micros: typing___Optional[builtin___int] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal[
            "_billable_unit_micros",
            b"_billable_unit_micros",
            "_code",
            b"_code",
            "_name",
            b"_name",
            "_symbol",
            b"_symbol",
            "billable_unit_micros",
            b"billable_unit_micros",
            "code",
            b"code",
            "name",
            b"name",
            "symbol",
            b"symbol",
        ],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "_billable_unit_micros",
            b"_billable_unit_micros",
            "_code",
            b"_code",
            "_name",
            b"_name",
            "_symbol",
            b"_symbol",
            "billable_unit_micros",
            b"billable_unit_micros",
            "code",
            b"code",
            "name",
            b"name",
            "resource_name",
            b"resource_name",
            "symbol",
            b"symbol",
        ],
    ) -> None: ...
    @typing___overload
    def WhichOneof(
        self,
        oneof_group: typing_extensions___Literal[
            "_billable_unit_micros", b"_billable_unit_micros"
        ],
    ) -> typing_extensions___Literal["billable_unit_micros"]: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_code", b"_code"]
    ) -> typing_extensions___Literal["code"]: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_name", b"_name"]
    ) -> typing_extensions___Literal["name"]: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_symbol", b"_symbol"]
    ) -> typing_extensions___Literal["symbol"]: ...

type___CurrencyConstant = CurrencyConstant
