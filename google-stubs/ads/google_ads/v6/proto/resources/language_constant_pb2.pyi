# @generated by mypy-protobuf.  Do not edit manually!
import sys
from typing import (
    Optional as typing___Optional,
    Text as typing___Text,
    overload as typing___overload,
)

from google.protobuf.descriptor import (
    Descriptor as google___protobuf___descriptor___Descriptor,
    FileDescriptor as google___protobuf___descriptor___FileDescriptor,
)
from google.protobuf.message import Message as google___protobuf___message___Message
from typing_extensions import Literal as typing_extensions___Literal

builtin___bool = bool
builtin___bytes = bytes
builtin___float = float
builtin___int = int

DESCRIPTOR: google___protobuf___descriptor___FileDescriptor = ...

class LanguageConstant(google___protobuf___message___Message):
    DESCRIPTOR: google___protobuf___descriptor___Descriptor = ...
    resource_name: typing___Text = ...
    id: builtin___int = ...
    code: typing___Text = ...
    name: typing___Text = ...
    targetable: builtin___bool = ...
    def __init__(
        self,
        *,
        resource_name: typing___Optional[typing___Text] = None,
        id: typing___Optional[builtin___int] = None,
        code: typing___Optional[typing___Text] = None,
        name: typing___Optional[typing___Text] = None,
        targetable: typing___Optional[builtin___bool] = None,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions___Literal[
            "_code",
            b"_code",
            "_id",
            b"_id",
            "_name",
            b"_name",
            "_targetable",
            b"_targetable",
            "code",
            b"code",
            "id",
            b"id",
            "name",
            b"name",
            "targetable",
            b"targetable",
        ],
    ) -> builtin___bool: ...
    def ClearField(
        self,
        field_name: typing_extensions___Literal[
            "_code",
            b"_code",
            "_id",
            b"_id",
            "_name",
            b"_name",
            "_targetable",
            b"_targetable",
            "code",
            b"code",
            "id",
            b"id",
            "name",
            b"name",
            "resource_name",
            b"resource_name",
            "targetable",
            b"targetable",
        ],
    ) -> None: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_code", b"_code"]
    ) -> typing_extensions___Literal["code"]: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_id", b"_id"]
    ) -> typing_extensions___Literal["id"]: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_name", b"_name"]
    ) -> typing_extensions___Literal["name"]: ...
    @typing___overload
    def WhichOneof(
        self, oneof_group: typing_extensions___Literal["_targetable", b"_targetable"]
    ) -> typing_extensions___Literal["targetable"]: ...

type___LanguageConstant = LanguageConstant
