import grpc
from .base import AssetGenerationServiceTransport
from google.ads.googleads.v22.services.types import asset_generation_service
from google.api_core import gapic_v1
from google.auth import credentials as ga_credentials
from typing import Callable, Sequence

__all__ = ['AssetGenerationServiceGrpcTransport']

class _LoggingClientInterceptor(grpc.UnaryUnaryClientInterceptor):
    def intercept_unary_unary(self, continuation, client_call_details, request): ...

class AssetGenerationServiceGrpcTransport(AssetGenerationServiceTransport):
    def __init__(self, *, host: str = 'googleads.googleapis.com', credentials: ga_credentials.Credentials | None = None, credentials_file: str | None = None, scopes: Sequence[str] | None = None, channel: grpc.Channel | Callable[..., grpc.Channel] | None = None, api_mtls_endpoint: str | None = None, client_cert_source: Callable[[], tuple[bytes, bytes]] | None = None, ssl_channel_credentials: grpc.ChannelCredentials | None = None, client_cert_source_for_mtls: Callable[[], tuple[bytes, bytes]] | None = None, quota_project_id: str | None = None, client_info: gapic_v1.client_info.ClientInfo = ..., always_use_jwt_access: bool | None = False, api_audience: str | None = None) -> None: ...
    @classmethod
    def create_channel(cls, host: str = 'googleads.googleapis.com', credentials: ga_credentials.Credentials | None = None, credentials_file: str | None = None, scopes: Sequence[str] | None = None, quota_project_id: str | None = None, **kwargs) -> grpc.Channel: ...
    @property
    def grpc_channel(self) -> grpc.Channel: ...
    @property
    def generate_text(self) -> Callable[[asset_generation_service.GenerateTextRequest], asset_generation_service.GenerateTextResponse]: ...
    @property
    def generate_images(self) -> Callable[[asset_generation_service.GenerateImagesRequest], asset_generation_service.GenerateImagesResponse]: ...
    def close(self) -> None: ...
    @property
    def kind(self) -> str: ...
